// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract BLSTest {
    struct E1Point {
        uint256 x;
        uint256 y;
    }

    // Note that the ordering of the elements in each array needs to be the reverse of what you would
    // normally have, to match the ordering expected by the precompile.
    struct E2Point {
        uint256[2] x;
        uint256[2] y;
    }
    // p is a prime over which we form a basic field
    // Taken from go-ethereum/crypto/bn256/cloudflare/constants.go
    uint256 constant p =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    function verifySignaturePoint(
        bytes calldata _publicKey, // an E2 point
        bytes calldata _message, // an E1 point
        bytes calldata _signature // an E1 point
    ) external view returns (bool) {
        E2Point memory pub = decodeE2Point(_publicKey);
        E1Point memory sig = decodeE1Point(_signature);
        return verifyForPoint(pub, decodeE1Point(_message), sig);
    }

    function decodeE2Point(bytes memory _pubKey)
        private
        pure
        returns (E2Point memory pubKey)
    {
        uint256[] memory output = new uint256[](4);
        for (uint256 i = 32; i <= output.length * 32; i += 32) {
            assembly {
                mstore(add(output, i), mload(add(_pubKey, i)))
            }
        }

        pubKey.x[0] = output[0];
        pubKey.x[1] = output[1];
        pubKey.y[0] = output[2];
        pubKey.y[1] = output[3];
    }

    function decodeE1Point(bytes memory _sig)
        private
        pure
        returns (E1Point memory signature)
    {
        uint256[] memory output = new uint256[](2);
        for (uint256 i = 32; i <= output.length * 32; i += 32) {
            assembly {
                mstore(add(output, i), mload(add(_sig, i)))
            }
        }

        signature.x = output[0];
        signature.y = output[1];
    }

    function verifyForPoint(
        E2Point memory _publicKey,
        E1Point memory _message,
        E1Point memory _signature
    ) internal view returns (bool) {
        E1Point[] memory e1points = new E1Point[](2);
        E2Point[] memory e2points = new E2Point[](2);
        e1points[0] = negate(_signature);
        e1points[1] = _message;
        e2points[0] = G2();
        e2points[1] = _publicKey;
        return pairing(e1points, e2points);
    }

    function G2() private pure returns (E2Point memory) {
        return
            E2Point({
                x: [
                    11559732032986387107991004021392285783925812861821192530917403151452391805634,
                    10857046999023057135944570762232829481370756359578518086990519993285655852781
                ],
                y: [
                    4082367875863433681332203403145435568316851327593401208105741076214120093531,
                    8495653923123431417604973247489272438418190587263600148770280649306958101930
                ]
            });
    }

    function isAtInfinity(E1Point memory _point) private pure returns (bool) {
        return (_point.x == 0 && _point.y == 0);
    }

    function negate(E1Point memory _point)
        private
        pure
        returns (E1Point memory)
    {
        if (isAtInfinity(_point)) {
            return E1Point(0, 0);
        }
        return E1Point(_point.x, p - (_point.y % p));
    }

    function pairing(E1Point[] memory _e1points, E2Point[] memory _e2points)
        private
        view
        returns (bool)
    {
        require(_e1points.length == _e2points.length, "Point count mismatch.");

        uint256 elements = _e1points.length;
        uint256 inputSize = elements * 6;
        uint256[] memory input = new uint256[](inputSize);

        for (uint256 i = 0; i < elements; i++) {
            input[i * 6 + 0] = _e1points[i].x;
            input[i * 6 + 1] = _e1points[i].y;
            input[i * 6 + 2] = _e2points[i].x[0];
            input[i * 6 + 3] = _e2points[i].x[1];
            input[i * 6 + 4] = _e2points[i].y[0];
            input[i * 6 + 5] = _e2points[i].y[1];
        }

        uint256[1] memory out;
        bool success;
        assembly {
            // Start at memory offset 0x20 rather than 0 as input is a variable length array.
            // Location 0 is the length field.
            success := staticcall(
                sub(gas(), 2000),
                8,
                add(input, 0x20),
                mul(inputSize, 0x20),
                out,
                0x20
            )
        }
        // The pairing operation will fail if the input data isn't the correct size (this won't happen
        // given the code above), or if one of the points isn't on the curve.
        require(success, "Pairing operation failed.");
        return out[0] != 0;
    }

    function pairingCheck() public returns (bool) {
        uint256[12] memory input;
        input[
            0
        ] = 0x601db5200ea8a6373a7a5b565b9e95c006ddb0bdf0adf2ae231bc3f0ef13a1cf;
        input[
            1
        ] = 0x15c7d07c14b5167005828ebb032cd4ad75b0e67fced75862bf6f9a08d49f4622;
        input[
            2
        ] = 0x2ecca446ff6f3d4d03c76e9b5c752f28bc37b364cb05ac4a37eb32e1c3245970;
        input[
            3
        ] = 0x8f25386f72c9462b81597d65ae2092c4b97792155dcdaad32b8a6dd41792534c;
        input[
            4
        ] = 0x2db10ef5233b0fe3962b9ee6a4bbc2b5bde01a54f3513d42df972e128f31bf12;
        input[
            5
        ] = 0x274e5747e8cafacc3716cc8699db79b22f0e4ff3c23e898f694420a3be3087a5;
        //input[
        //     6
        // ] = 0x704f7560581c96f44bf745d68b95ca29ab91381f24222af1dd251883e7839aa5;
        // input[
        //     7
        // ] = 0x1ce746c9701d545b47fb7e1396d0ddccee1967d4c35195a3e8c48bd15580b5b8;
        // input[
        //     8
        // ] = 0x2ecca446ff6f3d4d03c76e9b5c752f28bc37b364cb05ac4a37eb32e1c3245970;
        // input[
        //     9
        // ] = 0x8f25386f72c9462b81597d65ae2092c4b97792155dcdaad32b8a6dd41792534c;
        // input[
        //     10
        // ] = 0x2db10ef5233b0fe3962b9ee6a4bbc2b5bde01a54f3513d42df972e128f31bf12;
        // input[
        //     11
        // ] = 0x274e5747e8cafacc3716cc8699db79b22f0e4ff3c23e898f694420a3be3087a5;
        uint256[1] memory out;
        bool success;
        assembly {
            // Start at memory offset 0x20 rather than 0 as input is a variable length array.
            // Location 0 is the length field.
            success := staticcall(
                sub(gas(), 2000),
                8,
                input,
                0xc0,
                out,
                0x20
            )
        }
        // The pairing operation will fail if the input data isn't the correct size (this won't happen
        // given the code above), or if one of the points isn't on the curve.
        require(success, "Pairing operation failed.");
        return out[0] != 0;
    }
}
