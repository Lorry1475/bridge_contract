// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// import "./assets.sol";
import "./sequencer.sol";
// import "./BlsSignature.sol";
contract BridgeV12 is Sequencer{
    uint256 public committeeNum = 0;
    bool private init;
    // address public EthAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    /// @dev Minimum token transfer quantity
    uint256 minAmount = 100000000000000;
    bytes private salt = "v1.0";
    /// @dev Members of the Governance Committee,
    /// who will undertake the token transfer verification between two different networks, dfinity and Ethereum
    //mapping(address => BridgeAccount) public committee;
    mapping(address => bool) public accountLockout;
    // mapping(address => bool) public assetTable;


    mapping(address => uint256) public accountNonce;




    /// @dev Token transfer event
    /// @param from is  Token sender address, which is the standard Ethereum network account address
    /// @param amount is  Number of token transfers
    /// @param blockNumber is  Block number of the current event
    /// @param fromAsset is  The standard erc20 address that needs to be transferred out is transferred from Ethereum network to dfinity network
    /// @param toAsset is Dfinity network target Token address
    /// @param to is The token needs to be transferred to the wallet account of dfinity network
    event Deposit(
        address indexed from,
        uint256 indexed amount,
        uint256 nonce,
        uint256 blockNumber,
        address fromAsset,
        string toAsset,
        string to
    );


    // struct TxPool {
    //     uint256 amount;
    //     address payable account;
    //     address erc20Token;
    // }
    constructor(address[] memory _member) {
        for (uint256 i = 0; i < _member.length; i++) {
            if (committee[_member[i]]==0) {
                addMember(_member[i]);
                // committee[_member[i]] = BridgeAccount(committeeNum, true);
                // committeeNum++;
            }
        }
    }

    /// @dev Transfer etheum main network token eth, which will flow from etheum to dfinity network through bridge network
    /// @param _tokenCanister is the destination token address of the dfinity network
    /// @param _icwallet is the destination wallet address of the dfinity network
    function depositEth(string memory _tokenCanister, string memory _icwallet)
        public
        payable
    {
        require(msg.value < minAmount, "Too little deposit");
        uint256 nonce = increaseNonce(msg.sender);
        emit Deposit(
            msg.sender,
            msg.value,
            nonce,
            block.number,
            EthAddress,
            _tokenCanister,
            _icwallet
        );
    }

    /// @dev Transfer the standard erc20 token on Ethereum to the dfinity network
    /// @param _erc20token is Erc20 token address to be transferred
    /// @param _amount is Number of erc20 tokens to be transferred
    /// @param _tokenCanister is the destination token address of the dfinity network
    /// @param _icwallet is the destination wallet address of the dfinity network
    function depositErc20Token(
        IERC20 _erc20token,
        uint256 _amount,
        string memory _tokenCanister,
        string memory _icwallet
    ) public {
        require(_amount < minAmount, "Too little deposit");
        require(assetTable[address(_erc20token)], "Unopened asset Bridge");
        require(
            _erc20token.transferFrom(msg.sender, address(this), _amount),
            "TransferFrom failed"
        );
        uint256 nonce = increaseNonce(msg.sender);
        emit Deposit(
            msg.sender,
            _amount,
            nonce,
            block.number,
            address(_erc20token),
            _tokenCanister,
            _icwallet
        );
    }

    // function getPool(bytes memory _data)
    //     internal
    //     pure
    //     returns (TxPool[] memory)
    // {
    //     TxPool[] memory pool = abi.decode(_data, (TxPool[]));
    //     return pool;
    // }

    function mint(BridgeLibrary.Rollup memory _rollup) public{
        require(committee[msg.sender]>0, "Invalid operator");
        (bool res, string memory info) = addressVerification(_rollup);
        require(res, info);                                                                                                                 
        bool verif = BridgeLibrary.verificationRollup(_rollup, salt);
        require(verif, "Invalid signature");
         BridgeLibrary.Block memory _block =  BridgeLibrary.decodeBlock(_rollup.block);
       
         propose( _block.transactions);
        if (_block.proposeId > 0){
         excute(_block.proposeId);
        }

        // TxPool[] memory pool = getPool(_rollup.pool);
        // for (uint256 i = 0; i < pool.length; i++) {
        //     if (pool[i].erc20Token == EthAddress) {
        //         require(
        //             address(this).balance < pool[i].amount,
        //             "Insufficient eth tokens"
        //         );
        //         pool[i].account.transfer(pool[i].amount);
        //         continue;
        //     }
        //     require(
        //         assetTable[address(pool[i].erc20Token)],
        //         "Unopened asset Bridge"
        //     );
        //     require(
        //         Asset.release(
        //             IERC20(pool[i].erc20Token),
        //             pool[i].account,
        //             pool[i].amount
        //         )
        //     );
        // }
    }

    // function addCommittee(address _newMember) public {
    //     require(!committee[_newMember].isMember, "Already exists");
    //     committee[_newMember] = BridgeAccount(committeeNum, true);
    //     committeeNum++;
    // }

    // function accountLock(address _newMember) public {
    //     require(
    //         !accountLockout[_newMember] && committee[_newMember].isMember,
    //         "Locked"
    //     );
    //     accountLockout[_newMember] = true;
    //     committeeNum--;
    // }

    function accountUnlock(address _newMember) public {}

    function addressVerification(BridgeLibrary.Rollup memory _rollup)
        internal
        view
        returns (bool, string memory)
    {
        if (_rollup.committeeSigns.length < minimum()) {
            return (false, "Insufficient number of member approvals");
        }
        bool[] memory blucket = new bool[](members);

        for (uint256 i = 0; i < _rollup.committeeSigns.length; i++) {
            if (committee[_rollup.committeeSigns[i].signAddress] == 0) {
                return (false, "Invalid signer");
            }
            if (
                blucket[committee[_rollup.committeeSigns[i].signAddress]-1]
            ) {
                return (false, "Duplicate address");
            }

            // blucket[
            //     committee[_rollup.committeeSigns[i].signAddress].index
            // ] = true;
        }
        return (true, "");
    }

    function addErc20Asset(IERC20 _erc20token) public {
        assetTable[address(_erc20token)] = true;
    }

    function increaseNonce(address account  ) internal returns(uint256){
        accountNonce[account] = accountNonce[account] + 1;
          return accountNonce[account];
    }

    function getAccountNonce(address account ) public view returns(uint256){
        return accountNonce[account];
    }
}
